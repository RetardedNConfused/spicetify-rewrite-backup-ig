// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");

function getExn(x) {
  if (x.TAG === /* Ok */0) {
    return x._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function mapWithDefault(opt, $$default, f) {
  var f$1 = Curry.__1(f);
  if (opt.TAG === /* Ok */0) {
    return f$1(opt._0);
  } else {
    return $$default;
  }
}

function map(opt, f) {
  var f$1 = Curry.__1(f);
  if (opt.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: f$1(opt._0)
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: opt._0
          };
  }
}

function flatMap(opt, f) {
  var f$1 = Curry.__1(f);
  if (opt.TAG === /* Ok */0) {
    return f$1(opt._0);
  } else {
    return {
            TAG: /* Error */1,
            _0: opt._0
          };
  }
}

function getWithDefault(opt, $$default) {
  if (opt.TAG === /* Ok */0) {
    return opt._0;
  } else {
    return $$default;
  }
}

function isOk(x) {
  if (x.TAG === /* Ok */0) {
    return true;
  } else {
    return false;
  }
}

function isError(x) {
  if (x.TAG === /* Ok */0) {
    return false;
  } else {
    return true;
  }
}

function equal(a, b, f) {
  if (a.TAG === /* Ok */0) {
    if (b.TAG === /* Ok */0) {
      return Curry._2(f, a._0, b._0);
    } else {
      return false;
    }
  } else if (b.TAG === /* Ok */0) {
    return false;
  } else {
    return true;
  }
}

function compare(a, b, f) {
  if (a.TAG === /* Ok */0) {
    if (b.TAG === /* Ok */0) {
      return Curry._2(f, a._0, b._0);
    } else {
      return 1;
    }
  } else if (b.TAG === /* Ok */0) {
    return -1;
  } else {
    return 0;
  }
}

function forEach(r, f) {
  if (r.TAG === /* Ok */0) {
    return Curry._1(f, r._0);
  }
  
}

function mapError(r, f) {
  if (r.TAG === /* Ok */0) {
    return r;
  } else {
    return {
            TAG: /* Error */1,
            _0: Curry._1(f, r._0)
          };
  }
}

exports.getExn = getExn;
exports.mapWithDefault = mapWithDefault;
exports.map = map;
exports.flatMap = flatMap;
exports.getWithDefault = getWithDefault;
exports.isOk = isOk;
exports.isError = isError;
exports.equal = equal;
exports.compare = compare;
exports.forEach = forEach;
exports.mapError = mapError;
/* No side effect */
